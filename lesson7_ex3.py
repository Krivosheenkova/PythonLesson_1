"""
    Реализовать программу работы с органическими клетками, состоящими из ячеек. Необходимо создать класс Клетка. В его
    конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число). В классе должны быть
    реализованы методы перегрузки арифметических операторов: сложение (__add__()), вычитание (__sub__()), умножение (
    __mul__()), деление (__truediv__()). Данные методы должны применяться только к клеткам и выполнять увеличение,
    уменьшение, умножение и обычное (не целочисленное) деление клеток, соответственно. В методе деления должно
    осуществляться округление значения до целого числа.
    - Сложение. Объединение двух клеток. При этом число ячеек общей
    клетки должно равняться сумме ячеек исходных двух клеток.
    - Вычитание. Участвуют две клетки. Операцию необходимо
    выполнять только если разность количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
    - Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек
    этих двух клеток.
    - Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное
    деление количества ячеек этих двух клеток.
    В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
    Данный метод позволяет организовать ячейки по рядам. Метод должен возвращать строку
    вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу. Если ячеек на формирование
    ряда не хватает, то в последний ряд записываются все оставшиеся.
"""


class NegativeInt(Exception):
    def __init__(self):
        print(f'Expected positive integer')


class Cell:
    def __init__(self, cellule):
        self.cellule = int(cellule)

    def __add__(self, other):
        return self.cellule + other.cellule


    def __sub__(self, other):
        res = self.cellule - other.cellule
        if res >= 0:
            return res
        else:
            raise NegativeInt

    def __mul__(self, other):
        return self.cellule * other.cellule

    def __truediv__(self, other):
        return round(self.cellule / other.cellule)

    def make_order(self, row):
        res = ''
        for i in range(int(self.cellule / row)):
            res += '*' * row + '\n'
        res += '*' * (self.cellule % row) + '\n'
        return res

c = Cell(6)
c_2 = Cell(1)

print(c + c_2)
print(c - c_2)
# print(c_2 - c)
print(c / c_2)
print(c * c_2)
print(c.make_order(6))
print(c.make_order(5))
print(c.make_order(4))
print(c.make_order(3))

